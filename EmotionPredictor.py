import torch
import numpy as np
from utils import utils

class EmotionPredictorByFacialLandmarks:

    def __init__(self,saveModelFileName):
        self.modelFileName = saveModelFileName

    def getDistance(self, lm1, lm2):
        x1 = lm1[:,:,0]
        y1 = lm1[:,:,1]
        x2 = lm2[:,:,0]
        y2 = lm2[:,:,1]
        dist = np.sqrt(np.square(x2 - x1) + np.square(y2 - y1))
        return dist

    def expandXYDim(self, landmarkArr):
        newLandmarkArr = np.zeros((landmarkArr.shape[0], landmarkArr.shape[1], int(landmarkArr.shape[2]/2), 2))
        for i in range(0, landmarkArr.shape[2], 2):
            newLandmarkArr[:, :, int(i/2), 0] = landmarkArr[:, :, i]
            newLandmarkArr[:, :, int(i/2), 1] = landmarkArr[:, :, i+1]
        return newLandmarkArr

    def getDistanceFeatures(self, landmarksArr):
        #landmarkArr shape [frameno, timeseq, coord in x,y pair]
        self.face_out = self.expandXYDim(landmarksArr[:, :, :34])
        self.brow_ell = self.expandXYDim(landmarksArr[:, :, 34:44])
        self.brow_r = self.expandXYDim(landmarksArr[:, :, 44:54])
        self.eye_ell = self.expandXYDim(landmarksArr[:, :, 72:84])
        self.eye_r = self.expandXYDim(landmarksArr[:, :, 84:96])
        self.nose_line = self.expandXYDim(landmarksArr[: ,:, 54:62])
        self.nose_arc = self.expandXYDim(landmarksArr[:, :, 62:72])
        self.lip_tu = self.expandXYDim(landmarksArr[:, :, 96:108])
        self.lip_bl = self.expandXYDim(landmarksArr[:, :, 108:120])
        self.lip_tl = self.expandXYDim(landmarksArr[:, :, 120:128])
        self.lip_bu = self.expandXYDim(landmarksArr[:, :, 128:136])
        d = np.zeros((landmarksArr.shape[0], landmarksArr.shape[1], 34))
        d[:,:,0] = self.getDistance(self.brow_ell[:, :, 0, :], self.eye_ell[:, :, 0, :])
        print('brow left', self.brow_ell[0, 0, 0, :])
        print('eye left', self.eye_ell[0, 0, 0, :])
        print('distance', d[0, 0, 0])
        d[:,:,1] = self.getDistance(self.brow_r[:, :, -1], self.eye_r[:, :, -3])
        ul = np.mean(self.brow_ell[:, :, 1:3, :], axis=2)
        dl = np.mean(self.brow_ell[:, :, -2:, :], axis=2)
        ptA = (ul + dl)/2.0
        d[:,:,2] = self.getDistance(ul, dl)
        d[:,:,3] = self.getDistance(self.brow_ell[:, :, 1], self.brow_ell[:, :, -1])
        d[:,:,4] = self.getDistance(self.brow_ell[:, :, 2], self.brow_ell[:, :, -2])
        ur = np.mean(self.brow_r[:, :, 1:3], axis=2)
        dr = np.mean(self.brow_r[:, :, -2:], axis=2)
        ptB = (ur + dr)/2.0
        d[:,:,5] = self.getDistance(ur, dr)
        d[:,:,6] = self.getDistance(self.eye_r[:, :, 1], self.eye_r[:, :, -1])
        d[:,:,7] = self.getDistance(self.eye_r[:, :, 2], self.eye_r[:, :, -2])
        d[:,:,8] = self.getDistance(self.lip_tu[:, :, 3], self.lip_tu[:, :, -3])
        d[:,:,9] = self.getDistance(self.eye_ell[:, :, 3], self.lip_tu[:, :, 0])
        d[:,:,10] = self.getDistance(self.eye_r[:, :, 0], self.lip_bl[:, :, 0])
        d[:,:,11] = self.getDistance(self.nose_arc[:, :, 2], self.lip_tu[:, :, 0])
        d[:,:,12] = self.getDistance(self.nose_arc[:, :, 2], self.lip_bl[:, :, 0])
        d[:,:,13] = self.getDistance(self.lip_tu[:, :, 0], self.lip_bl[:, :, 0])
        d[:,:,14] = self.getDistance(self.lip_tu[:, :, 3], self.lip_bl[:, :, -3])
        d[:,:,15] = self.getDistance(self.nose_arc[:, : ,2], self.face_out[:, :, 8])
        d[:,:,16] = self.getDistance(ul, ptA)
        d[:,:,17] = self.getDistance(dl, ptA)
        d[:,:,18] = self.getDistance(ptA, self.lip_tu[:, :, 0])
        d[:,:,19] = self.getDistance(ptB, ur)
        d[:,:,20] = self.getDistance(ptB, dr)
        d[:,:,21] = self.getDistance(self.lip_bl[:, :, 0], ptB)
        d[:,:,22] = self.getDistance(self.lip_tu[:, :, 0], self.lip_bl[:, :, 0])
        d[:,:,23] = self.getDistance(self.lip_tu[:, :, 1], self.lip_tu[:, :, -2])
        d[:,:,24] = self.getDistance(self.lip_tu[:, :, -1], self.lip_bl[: ,:, 0])
        d[:,:,25] = self.getDistance(self.brow_ell[:, :, -1], self.eye_ell[:, :, 3])
        d[:,:,26] = self.getDistance(self.brow_r[:, :, 0], self.eye_r[:, :, 0])
        d[:,:,27] = self.getDistance(self.eye_ell[:, :, 0], self.eye_ell[:, :, 3])/2.0
        d[:,:,28] = self.getDistance(self.eye_r[:, :, 0], self.eye_r[:, :, 3])/2.0
        d[:,:,29] = (d[:, :, 27] + d[:, :, 28]) / 2.0
        d[:,:,30] = self.getDistance((self.brow_ell[:, :, 0] + self.brow_r[:, :, -1])/2.0, self.nose_arc[:, :, 2])
        d[:,:,31] = self.getDistance((self.brow_ell[:, :, -1] + self.brow_r[:, :, 0])/2.0, self.nose_arc[:, :, 2])
        d[:,:,32] = self.getDistance((self.lip_tu[:, :, 0] + self.lip_bl[:, :, 0])/2.0, self.nose_arc[:, :, 2])
        d[:,:,33] = self.getDistance(self.lip_tl[:, :, 2], self.lip_bu[:, :, -2])
        return d

    def getFeaturesArr(self, clip) :
        tmp =  np.array(clip).reshape(1,10,136)
        featuresArr = self.getDistanceFeatures(tmp)
        return  featuresArr


    def predictEmotion(self,clip):
        X = self.getFeaturesArr(clip)
        X = torch.from_numpy(X)
        model = torch.load(self.modelFileName)
        model.eval()
        tmp = X.float()
        tmp_value = tmp
        prediction = model(tmp_value)
        print('prediction:', prediction)
        print('prediction.shape :', prediction.shape )
        print('Average prediction == ',prediction.mean(0))
        return prediction.mean(0)
      
   
 
if __name__=='__main__':
    testClip = "[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372];[489,907,486,1040,488,1179,501,1318,544,1434,622,1517,724,1584,827,1633,953,1642,1077,1624,1179,1568,1272,1501,1341,1409,1386,1296,1412,1177,1433,1045,1442,921,577,845,642,782,739,771,832,790,919,828,1055,825,1135,784,1224,760,1312,767,1372,823,979,890,978,970,980,1047,980,1128,850,1168,909,1186,973,1200,1039,1189,1097,1170,672,897,721,870,779,866,832,901,779,911,721,915,1109,894,1158,854,1216,854,1266,879,1219,899,1163,905,759,1362,832,1311,907,1301,965,1311,1023,1298,1086,1306,1146,1352,1087,1397,1026,1422,967,1430,906,1430,828,1409,792,1352,906,1338,966,1341,1024,1336,1115,1347,1027,1359,967,1375,907,1372]"
    npyFLP = utils.convertToNumpyArr(testClip)
    emotionPredictor = EmotionPredictorByFacialLandmarks('./fpModel.pkl')
    prediction = emotionPredictor.predictEmotion(npyFLP)
    predictionList = prediction.tolist()
    t = ' ,'.join(str(n) for n in predictionList)
    print('prediction == ',t)